import enum
from typing import Any

from tensorrt_bindings import __version__ as __version__

class Logger:
    # severity levels
    INTERNAL_ERROR: int
    ERROR: int
    WARNING: int
    INFO: int
    VERBOSE: int

    def __init__(self, min_severity: int = ...) -> None: ...
    def log(self, severity: int, msg: str) -> None: ...

class IBuilderConfig:
    def set_memory_pool_limit(
        self, pool: "MemoryPoolType", pool_size: int
    ) -> None: ...
    def set_flag(self, flag: "BuilderFlag") -> None: ...

class INetworkDefinition:
    pass

class Builder:
    def __init__(self, logger: Logger) -> None: ...
    def create_network(
        self, flags: int = ...
    ) -> INetworkDefinition: ...
    def create_builder_config(self) -> IBuilderConfig: ...
    @property
    def platform_has_fast_fp16(self) -> bool: ...
    def build_serialized_network(
        self, network: INetworkDefinition, config: Any
    ) -> Any: ...

class OnnxParser:
    def __init__(
        self, network: INetworkDefinition, logger: Logger
    ) -> None: ...
    def parse(self, model: bytes, path: str = ...) -> bool: ...
    def parse_from_file(self, path: str) -> bool: ...
    @property
    def num_errors(self) -> int: ...
    def get_error(self, index: int) -> Any: ...

class NetworkDefinitionCreationFlag(enum.IntFlag):
    EXPLICIT_BATCH = ...

class MemoryPoolType(enum.IntEnum):
    WORKSPACE = ...

class BuilderFlag(enum.IntEnum):
    FP16 = ...
    INT8 = ...

def get_plugin_registry() -> Any: ...
